# Production environment specific settings

# Use a more robust database for production (PostgreSQL configuration example)
# These would need to be set as environment variables in production
spring.datasource.url=${POSTGRES_URL:jdbc:postgresql://localhost:5432/aiinsightdb}
spring.datasource.username=${POSTGRES_USER:dbuser}
spring.datasource.password=${POSTGRES_PASSWORD:dbpassword}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Disable H2 console in production
spring.h2.console.enabled=false

# Production logging settings
logging.level.com.example.demo=INFO
logging.level.org.springframework.web=WARN
logging.level.org.hibernate=WARN

# Cache Configuration - Using Redis for production
spring.cache.type=redis
spring.cache.redis.time-to-live=86400000
spring.cache.redis.key-prefix=ai_insight_

# Redis Connection Properties
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.timeout=2000

# Cache settings for production (larger cache sizes)
spring.cache.cache-names=aiResponses
spring.cache.caffeine.spec=maximumSize=1000,expireAfterAccess=24h

# CORS for production - would be the actual domain of your frontend
spring.webmvc.cors.allowed-origins=${ALLOWED_ORIGINS:https://ai-insight-dashboard.example.com}

# Actuator settings for production
management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.health.show-details=when-authorized
